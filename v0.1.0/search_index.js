var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Interfaces","category":"page"},{"location":"#Interfaces","page":"Home","title":"Interfaces","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Interfaces.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Interfaces]","category":"page"},{"location":"#Interfaces.Interface","page":"Home","title":"Interfaces.Interface","text":"Interface{Components}\n\nAbstract supertype for all Interfaces.jl interfaces.\n\nComponents is an Tuple of Symbol.\n\n\n\n\n\n","category":"type"},{"location":"#Interfaces.components","page":"Home","title":"Interfaces.components","text":"components(::Type{<:Interface})\n\nReturns the components of the interface, as a NamedTuple of NamedTuple.\n\n\n\n\n\n","category":"function"},{"location":"#Interfaces.description","page":"Home","title":"Interfaces.description","text":"description(::Type{<:Interface})\n\nReturns a String description of an interface.\n\n\n\n\n\n","category":"function"},{"location":"#Interfaces.implements","page":"Home","title":"Interfaces.implements","text":"implements(::Type{<:Interface}, obj)\nimplements(::Type{<:Interface{Options}}, obj)\n\nReturns whether an object implements an interface, as a Bool.\n\nobj can be an be an object or a Type.\n\nOptions can be a Symbol or a Tuple of Symbol passed to the type parameter of the Interface, to check if optional interfaces are implemented by the obj.\n\nWithout specifying Options, the return value specifies that at least  all the mandatory components of the interace are implemented.\n\n\n\n\n\n","category":"function"},{"location":"#Interfaces.optional_keys","page":"Home","title":"Interfaces.optional_keys","text":"optional_keys(T::Type{<:Interface}, obj::Type)\n\nGet the keys for the optional components of an Interface, as a tuple os Symbol.\n\n\n\n\n\n","category":"function"},{"location":"#Interfaces.test-Union{Tuple{Keys}, Tuple{Type{<:Interfaces.Interface{Keys}}, Type}} where Keys","page":"Home","title":"Interfaces.test","text":"test(::Type{<:Interface}, obj)\n\nTest if an interface is implemented correctly for an object, returning true or false.\n\nIf no interface type is passed, Interfaces.jl will find all the interfaces available and test them.\n\n\n\n\n\n","category":"method"},{"location":"#Interfaces.test_objects","page":"Home","title":"Interfaces.test_objects","text":"test_objects(::Type{<:Interface}, ::Type)\n\nReturn the test object for an Interface and type.\n\n\n\n\n\n","category":"function"},{"location":"#Interfaces.@implements-Tuple{Any, Any, Any}","page":"Home","title":"Interfaces.@implements","text":"@implements(interface, objtype, obj)\n@implements(dev, interface, objtype, obj)\n\nDeclare that an interface implements an interface, or multipleinterfaces.\n\nAlso pass an object or tuple of objects to test it with.\n\nThe macro can only be used once per module for any one type. To define multiple interfaces a type implements, combine them in square brackets.\n\nPassing the keyword dev as the first argument lets us show test output during development. Do not use dev in production code, or output will appear during package precompilation.\n\nExample\n\nHere we implement the IterationInterface for Base julia, indicating with (:indexing, :reverse) that our object can be indexed and works with Iterators.reverse:\n\nusing BaseInterfaces\n@implements BaseInterfaces.IterationInterface{(:indexing,:reverse)} MyObject MyObject([1, 2, 3])\n\n\n\n\n\n","category":"macro"},{"location":"#Interfaces.@interface","page":"Home","title":"Interfaces.@interface","text":"@interface(interfacename, components, [description])\n\nDefine an interface.\n\n@interface MyInterface (\n    mandatory = (\n        length = x -> length(x) = prod(size(x)),\n        ndims = x -> ndims(x) = length(size(x)),\n    ),\n    optional = (;)\n) \"A description of the interface\"\n\n\n\n\n\n","category":"macro"}]
}
